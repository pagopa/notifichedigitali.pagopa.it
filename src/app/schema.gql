### Type definitions saved at 2022-10-07T12:56:47.316Z ###

enum RemoteFileFit {
  COVER
  FILL
  OUTSIDE
  CONTAIN
}

enum RemoteFileFormat {
  AUTO
  JPG
  PNG
  WEBP
  AVIF
}

enum RemoteFileLayout {
  FIXED
  FULL_WIDTH
  CONSTRAINED
}

enum RemoteFilePlaceholder {
  DOMINANT_COLOR
  BLURRED
  TRACED_SVG
  NONE
}

enum RemoteFileCropFocus {
  CENTER
  TOP
  RIGHT
  BOTTOM
  LEFT
  ENTROPY
  EDGES
  FACES
}

type RemoteFileResize {
  width: Int
  height: Int
  src: String
}

"""Remote Interface"""
interface RemoteFile {
  id: ID!
  mimeType: String!
  filename: String!
  filesize: Int
  width: Int
  height: Int
  publicUrl: String!
  resize(
    width: Int
    height: Int
    aspectRatio: Float
    fit: RemoteFileFit = COVER

    """
    
    The image formats to generate. Valid values are AUTO (meaning the same
    format as the source image), JPG, PNG, WEBP and AVIF.
    The default value is [AUTO, WEBP, AVIF], and you should rarely need to
    change this. Take care if you specify JPG or PNG when you do
    not know the formats of the source images, as this could lead to unwanted
    results such as converting JPEGs to PNGs. Specifying
    both PNG and JPG is not supported and will be ignored.
    """
    format: RemoteFileFormat = AUTO
    cropFocus: [RemoteFileCropFocus]
    quality: Int = 75
  ): RemoteFileResize

  """
  Data used in the <GatsbyImage /> component. See https://gatsby.dev/img for more info.
  """
  gatsbyImage(
    """
    
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if
    it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    
    """
    layout: RemoteFileLayout = CONSTRAINED

    """
    
    The display width of the generated image for layout = FIXED, and the display
    width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    
    """
    width: Int

    """
    
    If set, the height of the generated image. If omitted, it is calculated from
    the supplied width, matching the aspect ratio of the source image.
    """
    height: Int

    """
    
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    TRACED_SVG: a low-resolution traced SVG of the image.
    NONE: no placeholder. Set the argument "backgroundColor" to use a fixed background color.
    """
    placeholder: RemoteFilePlaceholder = DOMINANT_COLOR

    """
    
    If set along with width or height, this will set the value of the other
    dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    
    """
    aspectRatio: Float

    """
    
    The image formats to generate. Valid values are AUTO (meaning the same
    format as the source image), JPG, PNG, WEBP and AVIF.
    The default value is [AUTO, WEBP, AVIF], and you should rarely need to
    change this. Take care if you specify JPG or PNG when you do
    not know the formats of the source images, as this could lead to unwanted
    results such as converting JPEGs to PNGs. Specifying
    both PNG and JPG is not supported and will be ignored.
    
    """
    formats: [RemoteFileFormat!] = [AUTO, WEBP, AVIF]

    """
    
    A list of image pixel densities to generate for FIXED and CONSTRAINED
    images. You should rarely need to change this. It will never generate images
    larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, and [0.25, 0.5, 1, 2]
    for fluid. In this case, an image with a fluid layout and width = 400 would
    generate images at 100, 200, 400 and 800px wide.
    
    """
    outputPixelDensities: [Float] = [0.25, 0.5, 1, 2]

    """
    
    Specifies the image widths to generate. You should rarely need to change
    this. For FIXED and CONSTRAINED images it is better to allow these to be
    determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override
    the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    
    """
    breakpoints: [Int] = [750, 1080, 1366, 1920]

    """
    
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to
    decide which images to download. You can leave this blank for fixed images,
    or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    
    """
    sizes: String

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String
    fit: RemoteFileFit = COVER
    cropFocus: [RemoteFileCropFocus]
    quality: Int = 75
  ): GatsbyImageData
}

type File implements Node @dontInfer {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime: Date! @dateformat
  accessTime: Date! @dateformat
  changeTime: Date! @dateformat
  birthTime: Date! @dateformat
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime: Date! @dateformat
  mtime: Date! @dateformat
  ctime: Date! @dateformat
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
  blksize: Int
  blocks: Int
  url: String
}

type Directory implements Node @dontInfer {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime: Date! @dateformat
  accessTime: Date! @dateformat
  changeTime: Date! @dateformat
  birthTime: Date! @dateformat
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime: Date! @dateformat
  mtime: Date! @dateformat
  ctime: Date! @dateformat
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
}

type Site implements Node @derivedTypes @dontInfer {
  buildTime: Date @dateformat
  siteMetadata: SiteSiteMetadata
  port: Int
  host: String
  graphqlTypegen: SiteGraphqlTypegen
  polyfill: Boolean
  pathPrefix: String
  jsxRuntime: String
  trailingSlash: String
}

type SiteSiteMetadata @derivedTypes {
  title: String
  description: String
  metaTitle: String
  canonicalURL: String
  metaDescription: String
  metaSocial: SiteSiteMetadataMetaSocial
  keywords: String
  metaRobots: String
  metaViewport: String
}

type SiteSiteMetadataMetaSocial {
  socialNetwork: String
  title: String
  description: String
  image: String
}

type SiteGraphqlTypegen {
  typesOutputPath: String
  generateOnBuild: Boolean
}

type SiteFunction implements Node @dontInfer {
  functionRoute: String!
  pluginName: String!
  originalAbsoluteFilePath: String!
  originalRelativeFilePath: String!
  relativeCompiledFilePath: String!
  absoluteCompiledFilePath: String!
  matchPath: String
}

type SitePage implements Node @dontInfer {
  path: String!
  component: String!
  internalComponentName: String!
  componentChunkName: String!
  matchPath: String
  pageContext: JSON @proxy(from: "context", fromNode: false)
  pluginCreator: SitePlugin @link(by: "id", from: "pluginCreatorId")
}

type SitePlugin implements Node @dontInfer {
  resolve: String
  name: String
  version: String
  nodeAPIs: [String]
  browserAPIs: [String]
  ssrAPIs: [String]
  pluginFilepath: String
  pluginOptions: JSON
  packageJson: JSON
}

type SiteBuildMetadata implements Node @dontInfer {
  buildTime: Date @dateformat
}

type Mdx implements Node @dontInfer {
  excerpt(pruneLength: Int = 140): String
  tableOfContents(maxDepth: Int): JSON
}

type STRAPI__MEDIA implements Node @derivedTypes @dontInfer {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: STRAPI__MEDIAFormats
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  localFile: File @link(by: "id", from: "localFile___NODE")
  strapi_id: Int
}

type STRAPI__MEDIAFormats @derivedTypes {
  thumbnail: STRAPI__MEDIAFormatsThumbnail
}

type STRAPI__MEDIAFormatsThumbnail {
  name: String
  hash: String
  ext: String
  mime: String
  width: Int
  height: Int
  size: Float
  url: String
}

type STRAPI__COMPONENT_SHARED_SEO implements Node @dontInfer {
  metaTitle: String
  metaDescription: String
  metaViewport: String
  canonicalURL: String
  metaImage: STRAPI__MEDIA @link(by: "id", from: "metaImage___NODE")
  metaSocial: [STRAPI__COMPONENT_SHARED_META_SOCIAL] @link(by: "id", from: "metaSocial___NODE")
  strapi_id: Int
}

type STRAPI__COMPONENT_SHARED_META_SOCIAL implements Node @dontInfer {
  socialNetwork: String
  title: String
  description: String
  image: STRAPI__MEDIA @link(by: "id", from: "image___NODE")
  strapi_id: Int
}

type STRAPI__COMPONENT_SHARED_LINK_EXTRA_JSONNODE implements Node @childOf(types: ["STRAPI__COMPONENT_SHARED_LINK"]) @dontInfer {
  nothing: String
  extra: String
  stuff: String
}

type STRAPI__COMPONENT_SHARED_LINK_BODY_TEXTNODE implements Node @childOf(types: ["STRAPI__COMPONENT_SHARED_LINK"]) @dontInfer {
  body: String
}

type STRAPI__COMPONENT_SHARED_LINK implements Node @derivedTypes @dontInfer {
  title: String
  titlemobile: String
  body: STRAPI__COMPONENT_SHARED_LINKBody
  target: String
  attributes: String
  cssclass: String
  reactcomponent: String
  externalurl: String
  page: STRAPI_PAGE @link(by: "id", from: "page___NODE")
  strapi_id: Int
  extra: STRAPI__COMPONENT_SHARED_LINK_EXTRA_JSONNODE @link(by: "id", from: "extra___NODE")
  image: STRAPI__MEDIA @link(by: "id", from: "image___NODE")
  strapi_component: String
}

type STRAPI__COMPONENT_SHARED_LINKBody {
  data: STRAPI__COMPONENT_SHARED_LINK_BODY_TEXTNODE @link(by: "id", from: "data___NODE")
}

type STRAPI_PAGE implements Node @derivedTypes @dontInfer {
  title: String
  titlemobile: String
  description: String
  slug: String
  body: STRAPI_PAGEBody
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  publishedAt: Date @dateformat
  blocks: [STRAPI__COMPONENT_SHARED_GRIDSTRAPI__COMPONENT_SHARED_HEROSTRAPI__COMPONENT_SHARED_LINKUnion] @link(by: "id", from: "blocks___NODE")
  strapi_id: Int
  seo: STRAPI__COMPONENT_SHARED_SEO @link(by: "id", from: "seo___NODE")
}

type STRAPI_PAGEBody {
  data: STRAPI_PAGE_BODY_TEXTNODE @link(by: "id", from: "data___NODE")
}

type STRAPI_PAGE_BODY_TEXTNODE implements Node @childOf(types: ["STRAPI_PAGE"]) @dontInfer {
  body: String
}

union STRAPI__COMPONENT_SHARED_GRIDSTRAPI__COMPONENT_SHARED_HEROSTRAPI__COMPONENT_SHARED_LINKUnion = STRAPI__COMPONENT_SHARED_GRID | STRAPI__COMPONENT_SHARED_HERO | STRAPI__COMPONENT_SHARED_LINK

type STRAPI__COMPONENT_SHARED_HERO_EXTRA_JSONNODE implements Node @derivedTypes @childOf(types: ["STRAPI__COMPONENT_SHARED_HERO"]) @dontInfer {
  variant: String
  alert: STRAPI__COMPONENT_SHARED_HERO_EXTRA_JSONNODEAlert
}

type STRAPI__COMPONENT_SHARED_HERO_EXTRA_JSONNODEAlert {
  variant: String
  severity: String
}

type STRAPI__COMPONENT_SHARED_HERO_BODY_TEXTNODE implements Node @childOf(types: ["STRAPI__COMPONENT_SHARED_HERO"]) @dontInfer {
  body: String
}

type STRAPI__COMPONENT_SHARED_HERO implements Node @derivedTypes @dontInfer {
  strapi_component: String
  title: String
  titlemobile: String
  body: STRAPI__COMPONENT_SHARED_HEROBody
  imageposition: String
  extra: STRAPI__COMPONENT_SHARED_HERO_EXTRA_JSONNODE @link(by: "id", from: "extra___NODE")
  images: [STRAPI__MEDIA] @link(by: "id", from: "images___NODE")
  buttons: [STRAPI__COMPONENT_SHARED_LINK] @link(by: "id", from: "buttons___NODE")
  strapi_id: Int
}

type STRAPI__COMPONENT_SHARED_HEROBody {
  data: STRAPI__COMPONENT_SHARED_HERO_BODY_TEXTNODE @link(by: "id", from: "data___NODE")
}

type STRAPI__COMPONENT_SHARED_GRID_BODY_TEXTNODE implements Node @childOf(types: ["STRAPI__COMPONENT_SHARED_GRID"]) @dontInfer {
  body: String
}

type STRAPI__COMPONENT_SHARED_GRID implements Node @derivedTypes @dontInfer {
  strapi_component: String
  title: String
  titlemobile: String
  body: STRAPI__COMPONENT_SHARED_GRIDBody
  items: [STRAPI__COMPONENT_GRID_GRIDITEM] @link(by: "id", from: "items___NODE")
  strapi_id: Int
  variant: String
}

type STRAPI__COMPONENT_SHARED_GRIDBody {
  data: STRAPI__COMPONENT_SHARED_GRID_BODY_TEXTNODE @link(by: "id", from: "data___NODE")
}

type STRAPI__COMPONENT_GRID_GRIDITEM implements Node @derivedTypes @dontInfer {
  title: String
  titlemobile: String
  body: STRAPI__COMPONENT_GRID_GRIDITEMBody
  externalurl: String
  image: STRAPI__MEDIA @link(by: "id", from: "image___NODE")
  page: STRAPI_PAGE @link(by: "id", from: "page___NODE")
  strapi_id: Int
  issequential: Boolean
}

type STRAPI__COMPONENT_GRID_GRIDITEMBody {
  data: STRAPI__COMPONENT_GRID_GRIDITEM_BODY_TEXTNODE @link(by: "id", from: "data___NODE")
}

type STRAPI__COMPONENT_GRID_GRIDITEM_BODY_TEXTNODE implements Node @childOf(types: ["STRAPI__COMPONENT_GRID_GRIDITEM"]) @dontInfer {
  body: String
}

type STRAPI_NAVIGATION_EXTRA_JSONNODE implements Node @childOf(types: ["STRAPI_NAVIGATION"]) @dontInfer {
  stuff: String
}

type STRAPI_NAVIGATION implements Node @dontInfer {
  title: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  publishedAt: Date @dateformat
  extra: STRAPI_NAVIGATION_EXTRA_JSONNODE @link(by: "id", from: "extra___NODE")
  items: [STRAPI__COMPONENT_SHARED_LINK] @link(by: "id", from: "items___NODE")
  strapi_id: Int
}